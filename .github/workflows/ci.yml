name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      has_node: ${{ steps.check.outputs.has_node }}
      has_python: ${{ steps.check.outputs.has_python }}
      has_dockerfile: ${{ steps.check.outputs.has_dockerfile }}
    steps:
      - uses: actions/checkout@v4

      - id: check
        run: |
          # default outputs
          echo "has_node=false" >> $GITHUB_OUTPUT
          echo "has_python=false" >> $GITHUB_OUTPUT
          echo "has_dockerfile=false" >> $GITHUB_OUTPUT

          # node (package.json)
          if [ -f package.json ]; then
            echo "has_node=true" >> $GITHUB_OUTPUT
          fi

          # python (any tracked .py OR common py files)
          if [ -n "$(git ls-files '*.py')" ] || [ -f requirements.txt ] || [ -f pyproject.toml ]; then
            echo "has_python=true" >> $GITHUB_OUTPUT
          fi

          # docker
          if [ -f Dockerfile ]; then
            echo "has_dockerfile=true" >> $GITHUB_OUTPUT
          fi

  node:
    needs: detect
    if: needs.detect.outputs.has_node == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
      # This step will run your actual 'tsc -b && vite build' command
      - name: Run release build check
        run: npm run build
      - name: Run lint
        run: npm run lint

  python:
    needs: detect
    if: needs.detect.outputs.has_python == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies (if any)
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f pyproject.toml ]; then
            pip install .
          else
            echo "No Python requirements detected; skipping install"
          fi
      - name: Lint with flake8 (if available)
        run: |
          if python -c "import importlib.util, sys; sys.exit(0 if importlib.util.find_spec('flake8') else 1)" ; then
            flake8 . || exit 1
          else
            echo "flake8 not installed; skipping lint"
          fi
      - name: Run pytest (if available)
        run: |
          if python -c "import importlib.util, sys; sys.exit(0 if importlib.util.find_spec('pytest') else 1)" ; then
            pytest -q
          else
            echo "pytest not found; skipping tests"
          fi

  docker:
    needs: detect
    if: needs.detect.outputs.has_dockerfile == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up QEMU to allow building ARM64 images on the default AMD64 runner
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all 

      # Set up Docker Buildx (required for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # ⭐️ Build the ARM64-specific Docker image
      - name: Build ARM64 release image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false 
          load: false 
          tags: jetson-img:ci-test
          # CRITICAL: Explicitly target the ARM64 platform for the test
          platforms: linux/arm64 
      
      - name: ARM64 Build Test Successful
        run: echo "The custom Dockerfile successfully built a release image for the ARM64 architecture."
